在vim里执行 :e $MYVIMRC，不用管文件在哪儿
01.启动VIM
    vim -c cmd file: 在打开文件前，先执行指定的命令；
    vim -r file: 恢复上次异常退出的文件；
    vim -R file: 以只读的方式打开文件，但可以强制保存；
    vim -M file: 以只读的方式打开文件，不可以强制保存；
    vim -y num file: 将编辑窗口的大小设为num行；
    vim + file: 从文件的末尾开始；
    vim +num file: 从第num行开始；
    vim +/string file: 打开file，并将光标停留在第一个找到的string上。
    vim --remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim --remote file在已有的gvim中打开文件。

2.1打开文件
	:e file --关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。
	:e! file --放弃对当前文件的修改，编辑新的文件。
	:e+file -- 开始新的文件，并从文件尾开始编辑。
	:e+n file -- 开始新的文件，并从第n行开始编辑。
	:enew --编译一个未命名的新文档。(CTRL-W n)
	:e -- 重新加载当前文档。
	:e! -- 重新加载当前文档，并丢弃已做的改动。
	:e#或ctrl+^ -- 回到刚才编辑的文件，很实用。
	:f或ctrl+g -- 显示文档名，是否修改，和光标位置。
	:f filename -- 改变编辑的文件名，这时再保存相当于另存为。
	gf -- 打开以光标所在字符串为文件名的文件。
	:browse e -- 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：
	:set browsedir=last -- 用上次访问过的目录（默认）；
	:set browsedir=buffer -- 用当前文件所在目录；
	:set browsedir=current -- 用当前工作目录；
	:Sex -- 水平分割一个窗口，浏览文件系统；
	:Vex -- 垂直分割一个窗口，浏览文件系统；
	:cd directory进入某个目录

2.2编辑文件
	插入文本
		i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。
		I: 在当前行第一个非空字符前插入；
		gI: 在当前行第一列插入；
		a: 在光标后插入；
		A: 在当前行最后插入；
		o: 在下面新建一行插入；
		O: 在上面新建一行插入；
		:r filename在当前位置插入另一个文件的内容。
		:[n]r filename在第n行插入另一个文件的内容。
		:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。
	改写文本
		c[n]w: 改写光标后1(n)个词。
		c[n]l: 改写光标后n个字母。
		c[n]h: 改写光标前n个字母。
		[n]cc: 修改当前[n]行。
		[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
		[n]S: 删除指定数目的行，并以所输入文本代替之。
		注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。
		~: 反转光标所在字符的大小写。
		可视模式下的U或u：把选中的文本变为大写或小写。
		gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。
		下面的括号匹配对编程很实用的。
		ci', di', yi'：修改、剪切或复制'之间的内容。
		ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
		ci", di", yi"：修改、剪切或复制"之间的内容。
		ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
		ci(, di(, yi(：修改、剪切或复制()之间的内容。
		ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
		ci[, di[, yi[：修改、剪切或复制[]之间的内容。
		ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
		ci{, di{, yi{：修改、剪切或复制{}之间的内容。
		ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
		ci<, di<, yi<：修改、剪切或复制<>之间的内容。
		ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>。
		简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。
	删除、复制粘贴文本
		[n]x: 剪切光标右边n个字符，相当于d[n]l。
		[n]X: 剪切光标左边n个字符，相当于d[n]h。
		y: 复制在可视模式下选中的文本。
		yy or Y: 复制整行文本。
		y[n]w: 复制一(n)个词。
		y[n]l: 复制光标右边1(n)个字符。
		y[n]h: 复制光标左边1(n)个字符。
		y$: 从光标当前位置复制到行尾。
		y0: 从光标当前位置复制到行首。
		:m,ny 复制m行到n行的内容。
		y1G或ygg: 复制光标以上的所有行。
		yG: 复制光标以下的所有行。
		yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。
		d: 删除（剪切）在可视模式下选中的文本。
		d$ or D: 删除（剪切）当前位置到行尾的内容。
		d[n]w: 删除（剪切）1(n)个单词
		d[n]l: 删除（剪切）光标右边1(n)个字符。
		d[n]h: 删除（剪切）光标左边1(n)个字符。
		d0: 删除（剪切）当前位置到行首的内容
		[n] dd: 删除（剪切）1(n)行。
		:m,nd 剪切m行到n行的内容。
		d1G或dgg: 剪切光标以上的所有行。
		dG: 剪切光标以下的所有行。
		ggdG:删除全部
		daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。
		df查找字符：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。
		p: 在光标之后粘贴。
		P: 在光标之前粘贴。
		yyp复制一行
		ddp换行
	加上數目字
		喔！騷到 vi(m) 的癢處了，這是 vi(m) 一個非常騷包的功能，只此一家別無分號（當然同源的 ed，sed 等不在此限）。就是您可以在大部份的指令前加上數目字，代表要處理幾次的意思。以下用實例來說明比較清楚。
		这里的大部分指令包括：
		移动（jkhl)
		编辑（iI/aA/oO/ d/x/s/c/y/ dd/S/cc/yy/Y p/P)
		查找（fx Fx tx Tx)
		排版（> >>）
		5dd 刪除游標所在處（含）起算以下五行內容。妙吧！
		3r 按了 3r 後，您鍵入一個英文字，則三個字元皆會被您所鍵入的英文取代。很抱歉，這不能用於中文。
		5j 將五行合併成一行。
		3x 刪除三個字元。抱歉，不能用於中文。
		5ia 然後按 ecs，插入五個 a。中文也可以！
		2i wo esc 插入 wowo。中文也可以！
		5gg或5G 游標移至第五行，是從檔首開始起算。
		5l 移至右第五個字元處，當然 j 是可以用方向鍵取代的。
		所有移動指令（參考第二單元）都可以加上數目字來控制，中文也通喔！
		其它的指令和數目字結合，就留待各位去發掘吧！最重要的是請您親自操作看看，使用 vi(m) 常常要動動腦筋，會有更妙的操作方式。
	宏批量操作
		. --重复上一个编辑动作
		qa：开始录制宏a（键盘操作记录）
		q：停止录制
		@a：播放宏a
		n@a:连续n次播放宏a
	文本对象
		前面带i和a的区别：i是inner的意思，是不包含边界的；a 是as的意思，选择包括边界
		iw aw：一个词
		is,as：一句。
		ip,ap：一段。
		ib,ab：一块（包含在圆括号中的）。
		i,a 还可以跟成对的符号：[],<>,{}," ",' '
		y, d, c, v都可以跟 v_aquote a" 双引号字符串
		a' 单引号字符串
		a( 同 ab
		a) 同 ab
		a< "一个 <> 块" 从 '<' 到匹配的 '>'
		a> 同 a<
		aB "一个大块" 从 "[{" 到 "]}" (带上括号)
		aW "一个字串" (带上空白)
		a[ "一个 [] 块" 从 '[' 到匹配的 ']'
		a] 同 a[
		a` 反引号字符串
		ab "一个块" 从 "[(" 到 "])" (带上括号)
		ap "一个段落" (带上空白)
		as "一个句子" (带上空白)
		at "一个标签块" (带上空白)
		aw "一个单词" (带上空白)
		a{ 同 aB
		a} 同 aB
		i" 双引号字符串，不带引号
		i' 单引号字符串，不带引号
		i( 同 ib
		i) 同 ib
		i< "内含 <> 块" 从 '<' 到匹配的 '>'
		i> 同 i<
		iB "内含大块" 从 "[{" 到 "]}"
		iW "内含字串"
		i[ "内含 [] 块" 从 '[' 到匹配的 ']'
		i] 同 i[
		i` 反引号字符串，不带反引号
		ib "内含块" 从 "[(" 到 "])"
		ip "内含段落"
		is "内含句子"
		it "内含标签块"html等标签用
		iw "内含单词"
		i{ 同 iB
		i} 同 iB文本对象。
*寄存器*
	a-z：都可以用作寄存器名。"ayy把当前行的内容放入a寄存器。
	A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如"Ayy把当前行的内容追加到a寄存器中。
	:reg 显示所有寄存器的内容。
	""：不加寄存器索引时，默认使用的寄存器。
	"*：当前选择缓冲区，"*yy把当前行的内容放入当前选择缓冲区。
	"+：系统剪贴板。"+yy把当前行的内容放入系统剪贴板。
2.3查找与替换
	查找
		*: 向下搜索光标所在词。
		g*: 同上，但部分符合即可。
		#: 向上搜索光标所在词。
		g#: 同上，但部分符合即可。
		/something: 在后面的文本中查找something。
		?something: 在前面的文本中查找something。
		/pattern/+number: 将光标停在包含pattern的行后面第number行上。
		/pattern/-number: 将光标停在包含pattern的行前面第number行上。
		n: 向后查找下一个。
		N: 向前查找下一个。
		可以用grep或vimgrep查找一个模式都在哪些地方出现过， 其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。 用法为： :vim[grep]/pattern/[g] [j] files
		g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。
		j的含义是grep结束后，结果停在第j项，默认是停在第一项。
		vimgrep前面可以加数字限定搜索结果的上限，如
		:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。
		其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。 比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：
		:vim/^d{1,}./ %
		然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧， 就更像个目录了。
		[I:用列表的形式显示所有查找到的内容.列表里显示了匹配的这一行内容，供预览。可以先用 / 或者 ? 搜索，跳转到关键字后，再用 [I 命令。
		实际的使用经验是，选用/或？查找，如果结果数量大于5个以上就可以使用列表列出，根据给出的行号信息，用:number跳或nG跳转
	替换
		:s/old/new - 用new替换当前行第一个old。
		:s/old/new/g - 用new替换当前行所有的old。
		:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。
		:%s/old/new/g - 用new替换文件中所有的old。
		所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。
正则表达式
	vim中有个magic的设定。
		设定方法为：
		:set magic " 设置magic
		:set nomagic " 取消magic
		:h magic " 查看帮助
		vim毕竟是个编辑器，正则表达式中包含的大量元字符如果原封不动地引用（像perl 那样）， 势必会给不懂正则表达式的人造成麻烦，比如 /foo(1) 命令， 大多数人都用它来查找foo(1)这个字符串， 但如果按照正则表达式来解释，被查找的对象就成了 foo1 了。
		于是，vim就规定，正则表达式的元字符必须用反斜杠进行转义才行， 如上面的例子，如果确实要用正则表达式，就应当写成 /foo\(1\) 。 但是，像 . * 这种极其常用的元字符，都加上反斜杠就太麻烦了。 而且，众口难调，有些人喜欢用正则表达式，有些人不喜欢用……
		为了解决这个问题，vim设置了 magic 这个东西。简单地说， magic就是设置哪些元字符要加反斜杠哪些不用加的。 简单来说：
		magic (\m)：除了 $ . * ^ 之外其他元字符都要加反斜杠。
		nomagic (\M)：除了 $ ^ 之外其他元字符都要加反斜杠。
		\v （即 very magic 之意）：任何元字符都不用加反斜杠
		\V （即 very nomagic 之意）：任何元字符都必须加反斜杠
		这个设置也可以在正则表达式中通过 \m \m 开关临时切换。 \m 后面的正则表达式会按照 magic 处理，\m 后面的正则表达式按照 nomagic 处理， 而忽略实际的magic设置。
		/\m.* # 查找任意字符串
		/\M.* # 查找字符串 .* （点号后面跟个星号）
		默认设置是 magic，vim也推荐大家都使用magic的设置，在有特殊需要时，直接通过 \v\m\m\v 即可。
	常见元字符
		* 0个或多个(匹配优先)
		\+ 1个或多个(匹配优先)
		\? 或 \= 0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用
		\{n,m} n个到m个(匹配优先)
		\{n,} 最少n个(匹配优先)
		\{,m} 最多m个(匹配优先)
		\{n} 恰好n个
		. 匹配任意一个字符
		[abc] 匹配方括号中的任意一个字符。可以使用-表示字符范围， 如[a-z0-9]匹配小写字母和阿拉伯数字。
		[^abc] 在方括号内开头使用^符号，表示匹配除方括号中字符之外的任意字符。
		\d 匹配阿拉伯数字，等同于[0-9]。
		\D 匹配阿拉伯数字之外的任意字符，等同于[^0-9]。
		\x 匹配十六进制数字，等同于[0-9a-fa-f]。
		\X 匹配十六进制数字，等同于[^0-9a-fa-f]。
		\w 匹配单词字母，等同于[0-9a-za-z_]。
		\W 匹配单词字母之外的任意字符，等同于[^0-9a-za-z_]。
		\t 匹配字符。
		\s 匹配空白字符，等同于[ \t]。
		\s 匹配非空白字符，等同于[^ \t]。
		\a 所有的字母字符. 等同于[a-za-z]
		\l 小写字母 [a-z]
		\l 非小写字母 [^a-z]
		\u 大写字母 [a-z]
		\u 非大写字母 [^a-z]
		\_. 匹配包含换行在内的所有字符
		\{-} 表示前一个字符可出现零次或多次，但在整个正则表达式可以匹配成功的前提下，匹配的字符数越少越好
		\= 匹配一个可有可无的项
		\_s 匹配空格或断行
		\* 匹配 * 字符。
		\. 匹配 . 字符。
		\/ 匹配 / 字符。
		\\ 匹配 \ 字符。
		\[ 匹配 [ 字符。
		$ 匹配行尾
		^ 匹配行首
		\< 匹配单词词首
		\> 匹配单词词尾
	替换变量
		在正规表达式中使用 \( 和 \) 符号括起正规表达式，即可在后面使用\1、\2等变量来访问 \( 和 \) 中的内容。\0表示全部
		\| "或"操作符
		\& 并列
		函数式
		:s/替换字符串/\=函数式
		在函数式中可以使用 submatch(1)、submatch(2) 等来引用 \1、\2 等的内容，而submatch(0)可以引用匹配的整个内容。
	常见应用
		:%s/\s\+$// 去掉所有的行尾空格
		:%s/\(\s*\n\)\+/\r/ 去掉所有的空白行
		:%s!\ s*//.*!! 去掉所有的“//”注释
		首先可以注意到，这儿分隔符改用了“!”，原因是在模式或字符串部分使用了“/”字符，不换用其他分隔符的话就得在每次使用“/”字符本身时写成“\/”，上面的命令得写成“:%s/\s*\/\/.*//”，可读性较低。命令本身倒是相当简单，用过正则表达式的人估计都知道“.”匹配表示除换行符之外的任何字符吧。
		:%s!\s*/\*\_.\{-}\*/\s*! !g 去掉所有的“/* */”注释
		:g/^\s*$/d 删除只有空白的行
		:s/\(\w\+\)\s\+\(\w\+\)/\2\t\1 将 data1 data2 修改为 data2 data1
		:%s/\(\w\+\), \(\w\+\)/\2 \1/ 将 doe, john 修改为 john doe
		:%s/\/\=line(".") 将各行的 id 字符串替换为行号
		:%s/\(^\<\w\+\>\)/\=(line(".")-10) .".". submatch(1) 将每行开头的单词替换为(行号-10).单词的格式,如第11行的word替换成1. word
		排序 :/ob/+1,$!sort
		[^,]* 表示除‘，’号以外的其他字符：例如
		匹配像下面一行的句子：bdl, bl border-left;
		:vimgrep /^\([^,]*\),\s*\([^;]*\);$/g %
		:%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。
		:%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。
	还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，
		语法为 :[range]g/pattern/command
		例如 :%g/^ xyz/normal dd。
		表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。
		:%g/^[^snip].*/normal >>(这两个字符是先按CTRL+V再按SHIFT+>两次)，表示除了以snip开头的行都要向后缩进一个TAB
		关于range的规定为： 如果不指定range，则表示当前行。
		m,n: 从m行到n行。
		0: 最开始一行（可能是这样）。
		$: 最后一行
		.: 当前行
		%: 所有行
	排除 除了。。。之外的匹配用@!
		例如，把除了以ch01/ch02/...开头的所有行都向后缩进2个空格 ：
		:%s/\v^(ch\d+)@!/ /g
2.4排版
	基本排版
		<< 向左缩进一个shiftwidth
		>> 向右缩进一个shiftwidth
		:ce(nter) 本行文字居中
		:le(ft) 本行文字靠左
		:ri(ght) 本行文字靠右
		gq 对选中的文字重排，即对过长的文字进行断行
		gqq 重排当前行
		gqnq 重排n行
		gqap 重排当前段
		gqnap 重排n段
		gqnj 重排当前行和下面n行
		gqQ 重排当前段对文章末尾
		J 拼接当前行和下一行
		gJ 同 J ，不过合并后不留空格。
		正常模式下，按两下>;光标所在行会缩进。
		如果先按了n，再按两下>;，光标以下的n行会缩进。
		对应的，按两下<;，光标所在行会缩出。
		如果在编辑代码文件，可以用=进行调整。
		在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
		或者n =，调整n行代码的缩排。
	折叠
		zf -- 创建折叠的命令，可以在一个可视区域上使用该命令；
		zd -- 删除当前行的折叠；
		zD -- 删除当前行的折叠；
		zfap -- 折叠光标所在的段；
		zo -- 打开折叠的文本；
		zc -- 收起折叠；
		za -- 打开/关闭当前折叠；
		zr -- 打开嵌套的折行；
		zm -- 收起嵌套的折行；
		zR (zO) -- 打开所有折行；
		zM (zC) -- 收起所有折行；
		zj -- 跳到下一个折叠处；
		zk -- 跳到上一个折叠处；
		zi -- enable/disable fold;
	拼写检查
		:set spell－开启拼写检查功能
		:set nospell－关闭拼写检查功能
		]s－移到下一个拼写错误的单词
		[s－作用与上一命令类似，但它是从相反方向进行搜索
		z=－显示一个有关拼写错误单词的列表，可从中选择
		zg－告诉拼写检查器该单词是拼写正确的
		zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的
	统计字数
		g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。
		g C-g: 统计全文或统计部分的字数。
2.5编辑多个文件
	我们可以一次打开多个文件，如
	vi a.txt b.txt c.txt
	使用:next(:n)编辑下一个文件。
	:2n 编辑下2个文件。
	使用:previous或:N编辑上一个文件。
	使用:wnext，保存当前文件，并编辑下一个文件。
	使用:wprevious，保存当前文件，并编辑上一个文件。
	使用:args 显示文件列表。
	:n filenames或:args filenames 指定新的文件列表。
	vi -o filenames 在水平分割的多个窗口中编辑多个文件。
	vi -O filenames 在垂直分割的多个窗口中编辑多个文件。
	文件编辑缓冲区
		:buffers或:ls或:files 显示缓冲区列表。
		ctrl+^：在最近两个缓冲区间切换。
		:bn -- 下一个缓冲区。
		:bp -- 上一个缓冲区。
		:bl -- 最后一个缓冲区。
		:b[n]或:[n]b -- 切换到第n个缓冲区。
		:nbw(ipeout) -- 彻底删除第n个缓冲区。
		:nbd(elete) -- 删除第n个缓冲区，并未真正删除，还在unlisted列表中。
		:ba[ll] -- 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。
	分屏编辑
		vim -o file1 file2:水平分割窗口，同时打开file1和file2
		vim -O file1 file2:垂直分割窗口，同时打开file1和file2
		:split(:sp) -- 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。
		:split filename -- 水平分割窗口，并在新窗口中显示另一个文件。
		:nsplit(:nsp) -- 水平分割出一个n行高的窗口。
		:[N]new -- 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)
		ctrl+w f --水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。
		C-w C-^ -- 水平分割一个窗口，打开刚才编辑的文件。
		:vsplit(:vsp) -- 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)
		:[N]vne[w] -- 垂直分割出一个新窗口。
		:vertical 水平分割的命令： 相应的垂直分割。
	调整窗口大小
		ctrl+w + --当前窗口增高一行。也可以用n增高n行。
		ctrl+w - --当前窗口减小一行。也可以用n减小n行。
		ctrl+w _ --当前窗口扩展到尽可能的大。也可以用n设定行数。
		:resize n -- 当前窗口n行高。
		ctrl+w = -- 所有窗口同样高度。
		n ctrl+w _ -- 当前窗口的高度设定为n行。
		ctrl+w < --当前窗口减少一列。也可以用n减少n列。
		ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。
		ctrl+w | --当前窗口尽可能的宽。也可以用n设定列数。
	切换和移动窗口
		ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。
		ctrl+w p: 切换到前一个窗口。
		ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。
		ctrl+w t(b):切换到最上（下）面的窗口。
		ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。
		ctrl+w r：旋转窗口的位置。
		ctrl+w T: 将当前的窗口移动到新的标签页上。
	命令行方式打开分屏窗口
		用命令的方式：水平方向 :
		topleft copen(在上面打开)
		botright copen(在下面打开)
		垂直方向：
		vertical topleft copen(在左侧打开)
		vertical botright copen(在右侧打开)
	多标签窗口
		vim -p files: 打开多个文件，每个文件占用一个标签页。
		:tabe, tabnew -- 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。
		^w gf -- 在新的标签页里打开光标下路径指定的文件。
		:tabn -- 切换到下一个标签。Control + PageDown，也可以。
		:tabp -- 切换到上一个标签。Control + PageUp，也可以。
		[n] gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。
		:tab split -- 将当前缓冲区的内容在新页签中打开。
		:tabc[lose] -- 关闭当前的标签页。
		:tabo[nly] -- 关闭其它的标签页。
		:tabs -- 列出所有的标签页和它们包含的窗口。
		:tabm[ove] [N] -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。
		:+tabnew [filename] " 在下页之后打开标签页" 备注: 这比 :tabnew 要后一个位置
		:-tabnew [filename] " 在当前页之前打开标签页
		:0tabnew [filename] " 在首页之前打开标签页
		:$tabnew [filename] " 在末页之后打开标签页
		:tab split " 在新标签页上打开当前缓冲区
		:tab help gt "
2.6保存文件
	:w -- 保存修改。
	:n1,n2w filename -- 选择性保存从某n1行到另n2行的内容。
	:wq -- 保存并退出。
	ZZ -- 保存并退出。
	:x -- 保存并退出。
	:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)
	:saveas newfilename -- 另存为
2.7文件加密与编码
	vim -x file: 开始编辑一个加密的文件。
	:X -- 为当前文件设置密码。
	:set key= -- 去除文件的密码。
	:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
	:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
	:set fenc或:set fileencoding，查看当前文件的编码。
	在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。
	让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置
	大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。
	:e ++ff=dos filename, 让vim用dos格式打开这个文件。
	:w ++ff=mac filename, 以mac格式存储这个文件。
	:set ff，显示当前文件的格式。
	在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。
*使用标记（书签）*
	用标记定位移动
		使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。
		m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。
		m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
		`{a-z}: 移动到标记位置。
		'{a-z}: 移动到标记行的行首。
		`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
		``: 移动到上次编辑的位置。''也可以，不过``精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
		`": 移动到上次离开的地方。
		`.: 移动到最后改动的地方。
		'[: 移动到文档开头
		']: 移动到文档结尾
	删除、复制、粘贴
		:'a,'bd 删除两个标记之间文本
		:'a,'by 复制两个标记之间文本
		:'a,'bp 粘贴两个标记之间文本
	标签管理
		:marks 显示所有标记。
		:delmarks a b -- 删除标记a和b。
		:delmarks a-c -- 删除标记a、b和c。
		:delmarks a c-f -- 删除标记a、c、d、e、f。
		:delmarks! -- 删除当前缓冲区的所有标记。
		:help mark-motions 查看更多关于mark的知识。
光标的移动
	基本移动
		以下移动都是在normal模式下。
		h或退格: 左移一个字符；
		l或空格: 右移一个字符；
		j: 下移一行；
		k: 上移一行；
		gj: 移动到一段内的下一行；
		gk: 移动到一段内的上一行；
		+或Enter: 把光标移至下一行第一个非空白字符。
		-: 把光标移至上一行第一个非空白字符。
		w: 前移一个单词，光标停在下一个单词开头；
		W: 移动下一个单词开头，但忽略一些标点；
		e: 前移一个单词，光标停在下一个单词末尾；
		E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；
		b: 后移一个单词，光标停在上一个单词开头；
		B: 移动到上一个单词开头，忽略一些标点；
		ge: 后移一个单词，光标停在上一个单词末尾；
		gE: 同 ge ，不过‘单词’包含单词相邻的标点。
		(: 前移1句。
		): 后移1句。
		{: 前移1段。
		}: 后移1段。
		fc: 把光标移到同一行的下一个c字符处
		Fc: 把光标移到同一行的上一个c字符处
		tc: 把光标移到同一行的下一个c字符前
		Tc: 把光标移到同一行的上一个c字符后
		;: 配合f 和 t使用，重复一次
		,: 配合f 和 t使用，反
		gd: 跳转到局部变量的定义处；
		gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；
		g;: 上一个修改过的地方；
		g,: 下一个修改过的地方；
		[[: 跳转到上一个函数块开始，需要有单独一行的{。
		]]: 跳转到下一个函数块开始，需要有单独一行的{。
		[]: 跳转到上一个函数块结束，需要有单独一行的}。
		][: 跳转到下一个函数块结束，需要有单独一行的}。
		[{: 跳转到当前块开始处；
		]}: 跳转到当前块结束处；
		[/: 跳转到当前注释块开始处；
		]/: 跳转到当前注释块结束处；
		%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。
	翻屏
		ctrl+f: 下翻一屏。
		ctrl+b: 上翻一屏。
		ctrl+d: 下翻半屏。
		ctrl+u: 上翻半屏。
		ctrl+e: 向下滚动一行。
		ctrl+y: 向上滚动一行。
		n%: 到文件n%的位置。
		zz: 将当前行移动到屏幕中央。
		zt: 将当前行移动到屏幕顶端。
		shift+enter: 将当前行移动到屏幕顶端。
		zb: 将当前行移动到屏幕底端。
命令行
	normal模式下按:进入命令行模式
	命令行模式下的快捷键：
	上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。
	左右方向键：左/右移一个字符。
	C-w： 向前删除一个单词。
	C-h： 向前删除一个字符，等同于Backspace。
	C-u： 从当前位置移动到命令行开头。
	C-b： 移动到命令行开头。
	C-e： 移动到命令行末尾。
	Shift-Left： 左移一个单词。
	Shift-Right： 右移一个单词。
	@： 重复上一次的冒号命令。
	q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。
	q/和q? 可以打开查找历史记录。
	执行外部命令
	:! cmd 执行外部命令。
	:!! 执行上一次的外部命令。
	:sh 调用shell，用exit返回vim。
	:r !cmd 将命令的返回结果插入文件当前位置。
	:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。
	:ver 显示版本信息。
