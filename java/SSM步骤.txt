1、创建MAVEN工程
1.1 设置MAVEN
1.1.1 下载MAVEN
1.1.2 配置MAVEN的环境变量 M2_HOME=C:\apache-maven-3.5.4		Path=%M2_HOME%\bin;
1.1.3 测试环境变量 mvn -version
1.1.4 修改C:\apache-maven-3.5.4\conf\setting.xml 
本地库路径：<localRepository>${user.home}/.m2/repository</localRepository>
包下载源，指向国内镜像：
<mirrors>
   <mirror>
     <id>alimaven</id>
     <name>aliyun maven</name>
     <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
     <mirrorOf>central</mirrorOf>
  </mirror>  
  </mirrors>
1.2 在ECLIPSE里配置MAVEN
windows->preference->Maven->Installrations 添加maven的本地路径
windows->preference->Maven->user Settings 设置setting路径并update setting
2、在ECLIPSE里创建MAVEN项目
2.1缺少web.xml的解决方式：
1、工程右键-property-project facets-(去掉勾选Dynamic Web Moudle)-再勾选之，下面会出现配置web.xml的位置，配置src/main/webapp,确定即可出现
2、下载javaee Tools：  help->install software 查找javaee tools，找到对应版本，并下载安装之。重启动之后，工程右键会出现javaee tools菜单，子菜单中选最后一项
2.2 下载依赖jar包：百度搜maven pro 进入https://mvnrepository.com 搜下面的包名：
2.2.1 spring
	1、spring webmvc(spring基本包）
		spring-webmvc-xx.jar
		spring-aop-xx.jar
		spring-beans-xx.jar
		spring-context-xx.jar
		spring-core-xx.jar
		commons-logging-xx.jar
		spring-expression-xx.jar  
		spring-web-xx.jar
	2、spring jdbc（事务控制）
		spring-jdbc-xx.jar
		spring-tx-xx.jar
	3、spring aspects (面向切面)
		spring-aspects-xx.jar
		aspectweaver-xx.jar
2.2.2 mybatis
	1、mybatis
		mybatis-xx.jar
2.2.3 mybatis整合spring
	1、mybatis spring
		mybatis-spring-xx.jar
2.2.4 数据库连接池 驱动
	1、c3p0
		c3p0-xx.jar
	2、mysql
		mysql-connector-java-xx.jar
2.2.5 其它标配包（jstl	servlet-api	junit)
		jstl-xx.jar
		javax.servlet-api-xx.jar
		junit-xx.jar
2.2.6 分页依赖包pagehelper-xx.jar
2.2.7 spring mvc测试
		spring-test-xx.jar
2.2.8 json对象包,用json对象填充页面(无刷新技术).利用json对象纯字串特征(不再传输整个HTML页面),减轻了网络传输压力,同时前端的体验也很好.
	jackson databind
	ackson-databind-2.9.7.jar
	jackson-annotations-2.9.0.jar
	jackson-core-2.9.7.jar
3、前端框架bootstrap下载、jquery下载
4、配置文件：web.xml spring springmvc mybatis
4.1 web.xml
4.1.1 启动spring 容器：ContextLoaderListener classpath:applicationContext.xml
4.1.2 springmvc的前端控制器 拦截所有请求 DispatcherServlet
	dispatcherServlet-servlet.xml（springmvc配置文件）
4.1.3 字符编码控制器：CharacterEncodingFilter
4.1.4 使用Rest风格URI，将页面普通的post请求转为指定的delete或put请求
		HiddenHttpMethodFilter
4.2 springmvc配置文件dispatcherServlet-servlet.xml
		<!--扫描配置 只扫描controller包-->
		<context:component-scan base-package="com.student" use-default-filters="false">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		</context:component-scan>	
		<!--配置视图解析器，页面返回-->
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/views"></property>
			<property name="suffix" value=".jsp"></property>
		</bean>
		<!--将springmvc不能处理的请求交给tomcat-->
		<mvc:default-servlet-handler/>
		<!--springmvc高级功能：JSR303校验，快捷的ajax..更重要的是映射动态请求-->
		<mvc:annotation-driven/>
4.3 SRPING的配置文件（数据源,事务控制）
	<!-- 扫描配置,除controller的其它都扫描 -->
	<context:component-scan base-package="com.student">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 数据源配置 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>	
	<bean id="cpDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- mybatis整合配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="cpDataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	<!-- mybatis扫描器,将mybatis接口的实现加入到ioc(ApplicationContext)容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.student.dao"></property>
	</bean>
	<!-- 数据批量处理-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="cpDataSource"></property>
	</bean>//指定事务控制类
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>//如何控制
	<aop:config>
		<aop:pointcut expression="execution(*[返回类型] com.student.service..[所有类]*[方法](..[所有参数]))" id="aopPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aopPointcut"/>
	</aop:config>//切面(控制哪些方法)
	
	附:dbconfig.properties
	jdbc.jdbcUrl=jdbc:mysql://localhost:3306/student
	jdbc.driverClass=com.mysql.jdbc.Driver
	jdbc.user=root
	jdbc.password=root
4.4 mybatis配置文件
	 <configuration>
		<settings>
			<setting name="mapUnderscoreToCamelCase" value="true"/>
		</settings>
		<typeAliases>
			<package name="com.student.bean"/>
		</typeAliases>
		<plugins>//分页插件
			<plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
		</plugins>
	  </configuration>
4.5 mybatis的逆向工程:
首先本要在工程目录下配置一个.xml文件:
不生成注释:
	<commentGenerator>
  		<property name="suppressAllComments" value="true"/>
  	</commentGenerator>
4.5.1 程序方式 重点:targetProject=".\src\main\java"
	public class MbgTest {
		public static void main(String[] args) throws Exception {
				List<String> warnings = new ArrayList<String>();
			   boolean overwrite = true;
			   File configFile = new File("mbg.xml");
			   ConfigurationParser cp = new ConfigurationParser(warnings);
			   Configuration config = cp.parseConfiguration(configFile);
			   DefaultShellCallback callback = new DefaultShellCallback(overwrite);
			   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
			   myBatisGenerator.generate(null);
		}
	}
4.5.2 插件方式 重点:targetProject="student\src\main\java" 或targetProject="student/src/main/java"
5 测试
5.1 普通测试
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(locations= {"classpath:applicationContext.xml"})
	public class MapperTest {
		@Autowired
		SqlSession sqlSession;
		@Autowired
		DeptMapper deptMapper;
		@Autowired
		EmployeeMapper empMapper;
		@Test
		public void testCRUD() {
	//		ApplicationContext ioc=new ClassPathXmlApplicationContext("applicationContext.xml");
	//		DeptMapper bean = ioc.getBean(DeptMapper.class);
			System.out.println(deptMapper);		
	//		deptMapper.insertSelective(new Dept(null,"测试部"));
	//		deptMapper.insertSelective(new Dept(null,"市场部"));
	//		empMapper.insertSelective(new Employee(null, "张三", "M", "zhangsan@163.com", 1));
			EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
			for(int i=0;i<1000;i++) {
				String rstr = UUID.randomUUID().toString().substring(0, 4)+i;
				employeeMapper.insertSelective(new Employee(null, rstr, "M", rstr+"@qq.com", 1));
			}
		}
	}
5.2 mvc测试
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(locations= {"classpath:applicationContext.xml","file:src/main/webapp/WEB-INF/dispatcherServlet-servlet.xml"})
public class MvcTest {
	@Autowired
	WebApplicationContext context;
	
	private MockMvc build;
	@Before
	public void initMockMvc() {
		build = MockMvcBuilders.webAppContextSetup(context).build();
	}
	@Test
	public void testPage() throws Exception {
		MvcResult result = build.perform(MockMvcRequestBuilders.get("/emps").param("pn", "4")).andReturn();
		MockHttpServletRequest request = result.getRequest();
		@SuppressWarnings("rawtypes")
		PageInfo pageinfo = (PageInfo) request.getAttribute("pageInfo");
		System.out.println("当前页码"+pageinfo.getPageNum());
		System.out.println("总页数"+pageinfo.getPages());
		System.out.println("总记录数"+pageinfo.getTotal());
		System.out.println("连续显示的页码");
		int[] navigatepageNums = pageinfo.getNavigatepageNums();
		for(int i:navigatepageNums) {
			System.out.print(i);
		}
		System.out.println("\n");
		List<Employee> list = pageinfo.getList();
		for(Employee emp:list) {
			System.out.println(emp.getEmail()+"\t"+emp.getEmpName()+"\t"+emp.getGender()+"\t"+emp.getDept().getDeptName());
		}
	}
}