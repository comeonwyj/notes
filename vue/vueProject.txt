
一、vue2.0
	npm install vue -g
	安装
	npm install vue-cli -g //2.0	
	创建项目
	vue init webpack vuedemo
	cd vuedemo
	npm install
	启动项目
	npm rundev
二、vue3.0
	npm install vue -g
	安装
	npm install -g @vue/cli //如果之前安装了2.0版本，先卸载 npm uninstall -g vue-cli 
	创建项目
	vue create vuedemo 或 vue ui
	cd vuedemo
	npm install
	启动项目
	npm run serve
三、vue2.0与3.0的区别
	1.默认进行懒观察（lazy observation）。
	在 2.x 版本里，不管数据多大，都会在一开始就为其创建观察者。当数据很大时，这可能会在页面载入时造成明显的性能压力。3.x 版本，只会对「被用于渲染初始可见部分的数据」创建观察者，而且 3.x 的观察者更高效。
	2.更精准的变更通知。
	比例来说：2.x 版本中，使用 Vue.set 来给对象新增一个属性时，这个对象的所有 watcher 都会重新运行；3.x 版本中，只有依赖那个属性的 watcher 才会重新运行。
	3.3.0 新加入了 TypeScript 以及 PWA 的支持
	4.部分命令发生了变化：
		下载安装 npm install -g vue@cli
		删除了vue list
		创建项目 vue create
		启动项目 npm run serve
	5.默认项目目录结构也发生了变化：
		移除了配置文件目录，config 和 build 文件夹
		移除了 static 文件夹，新增 public 文件夹，并且 index.html 移动到 public 中
		在 src 文件夹中新增了 views 文件夹，用于分类 视图组件 和 公共组件
四、前端UI框架的使用
	0. font-awsome <link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css">
	1.1、vue2.0使用vuetify:
		npm install --save vuetify
		安装字体和图标:
		npm install material-design-icons-iconfont -D
		npm install @mdi/font -D
		
		在 main.js 中引入并使用:
		// 引入vuetify
		import Vuetify from 'vuetify'
		import 'vuetify/dist/vuetify.min.css'
		//引入字体
		import 'material-design-icons-iconfont/dist/material-design-icons.css'
		import '@mdi/font/css/materialdesignicons.min.css'
		// 使用vuetify
		Vue.use(Vuetify)
		new Vue({
		  el: '#app',
		  router,
		  //初始化Vuetify
		  vuetify: new Vuetify(),
		  components: {
		    App
		  },
		  template: '<App/>'
		}).$mount('#app')

		App.vue：
		<div id="app"></div> 改为： <v-app id="app"></v-app>
	1.2、vue3.0使用vuetify
		在项目根目录中：vue add vuebutify 根据提示一步步操作。
	2、使用element-ui
		npm i element-ui -S

		main.js:
		import Vue from 'vue';
		import ElementUI from 'element-ui';//引入库
		import 'element-ui/lib/theme-chalk/index.css';//引入样式
		import App from './App.vue';

		Vue.use(ElementUI);//集成库到vue

		new Vue({
		  el: '#app',
		  render: h => h(App)
		});
	3、vant(移动端)
		npm i vant -S
		桌面端支持：
		Vant 是一个面向移动端的组件库，因此默认只适配了移动端设备，这意味着组件只监听了移动端的touch事件，没有监听桌面端的mouse事件。
		如果你需要在桌面端使用 Vant，可以引入我们提供的 @vant/touch-emulator，这个库会在桌面端自动将mouse事件转换成对应的touch事件，使得组件能够在桌面端使用。
		# 安装模块
		npm i @vant/touch-emulator -S
		// 引入模块后自动生效
		import '@vant/touch-emulator';

		使用：
		Vant 支持一次性导入所有组件，引入所有组件会增加代码包体积，因此不推荐这种做法

		import Vue from 'vue';
		import Vant from 'vant';
		import 'vant/lib/index.css';

		Vue.use(Vant);


	